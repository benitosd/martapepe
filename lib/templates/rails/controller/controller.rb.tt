<% if namespaced? -%>
require_dependency "<%= namespaced_file_path %>/application_controller"
<% end -%>
<% module_namespacing do -%>
class <%= controller_class_name %>Controller < ApplicationController
  before_action :set_<%= singular_table_name %>, only: [:show, :edit, :update, :destroy]

  # GET <%= route_url %>
  def index
    @search = <%= class_name %>.search do
      fulltext params[:search] unless params[:search].blank?
      paginate page: params[:page] || 1, per_page: 10
      order_by(params[:order], params[:sort]) unless params[:order].blank?
    end
    @<%= plural_table_name %> = @search.results
  end

  # GET <%= route_url %>/1
  def show; end

  # GET <%= route_url %>/new
  def new
    @<%= singular_table_name %> = <%= orm_class.build(class_name) %>
  end

  # GET <%= route_url %>/1/edit
  def edit; end

  # POST <%= route_url %>
  def create
    @<%= singular_table_name %> = <%= orm_class.build(class_name, "#{singular_table_name}_params") %>

    respond_to do |format|
      if @<%= orm_instance.save %>
        format.turbo_stream do
          render turbo_stream: turbo_stream.prepend('<%= plural_table_name %>', partial: '<%= plural_table_name %>/<%= singular_table_name %>', locals: { <%= singular_table_name %>: @<%= singular_table_name %> })
        end
        format.html { redirect_to <%= index_helper %>_url, notice: I18n.t("<%= application_name %>.messages.created", resource: "<%= human_name %>") }
      else
        format.turbo_stream do
          render turbo_stream: turbo_stream.replace('form_errors', partial: '<%= plural_table_name %>/form_errors', locals: { <%= singular_table_name %>: @<%= singular_table_name %> })
        end
        format.html { render :new, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT <%= route_url %>/1
  def update
    respond_to do |format|
      if @<%= orm_instance.update("#{singular_table_name}_params") %>
        format.turbo_stream do
          render turbo_stream: turbo_stream.replace(@<%= singular_table_name %>, partial: '<%= plural_table_name %>/<%= singular_table_name %>', locals: { <%= singular_table_name %>: @<%= singular_table_name %> })
        end
        format.html { redirect_to <%= index_helper %>_url, notice: I18n.t("<%= application_name %>.messages.updated", resource: "<%= human_name %>") }
      else
        format.turbo_stream do
          render turbo_stream: turbo_stream.replace('form_errors', partial: '<%= plural_table_name %>/form_errors', locals: { <%= singular_table_name %>: @<%= singular_table_name %> })
        end
        format.html { render :edit, status: :unprocessable_entity }
      end
    end
  end

  # DELETE <%= route_url %>/1
  def destroy
    @<%= orm_instance.destroy %>
    respond_to do |format|
      format.turbo_stream do
        render turbo_stream: turbo_stream.remove(@<%= singular_table_name %>)
      end
      format.html { redirect_to <%= index_helper %>_url, notice: I18n.t("<%= application_name %>.messages.destroyed", resource: "<%= human_name %>") }
    end
  end

  private

    # Use callbacks to share common setup or constraints between actions.
    def set_<%= singular_table_name %>
      @<%= singular_table_name %> = <%= orm_class.find(class_name, "params[:id]") %>
    end

    # Only allow a trusted parameter "white list" through.
    def <%= "#{singular_table_name}_params" %>
      <%- if attributes_names.empty? -%>
      params[:<%= singular_table_name %>]
      <%- else -%>
      params.require(:<%= singular_table_name %>).permit(<%= attributes_names.map { |name| ":#{name}" }.join(', ') %>)
      <%- end -%>
    end
end
<% end -%>
